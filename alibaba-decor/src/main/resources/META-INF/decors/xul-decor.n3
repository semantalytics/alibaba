@prefix rdf:        <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:       <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dc:         <http://purl.org/dc/elements/1.1/>.
@prefix xsd:        <http://www.w3.org/2001/XMLSchema#>.
@prefix owl:        <http://www.w3.org/2002/07/owl#>.
@prefix pov:        <http://www.openrdf.org/rdf/2007/09/point-of-view#>.
@prefix dcr:        <http://www.openrdf.org/rdf/2007/09/decor#>.
@prefix ali:        <http://www.openrdf.org/rdf/2007/09/alibaba/>.

# -----------------------------------------------
# Individuals
# -----------------------------------------------

# -----------------------------------------------
# Individual PresentationRepositories
# -----------------------------------------------

ali:presentation-repository a dcr:PresentationRepository;
    dcr:registeredPresentation ali:xul-presentation;
    dcr:registeredPresentation ali:xul-modify-presentation.

# -----------------------------------------------
# Individual Presentations
# -----------------------------------------------

ali:xul-presentation a dcr:TextPresentation;
    rdfs:label "XUL presentation"@en;
    rdfs:comment "Presentation for XUL display."@en;
    dcr:accept "text/xul";
    dcr:accept "application/vnd.mozilla.xul+xml";
    dcr:contentType "application/vnd.mozilla.xul+xml";
    dcr:intention ali:present;
    dcr:intention ali:general;
    dcr:intention ali:detail;
    dcr:intention ali:related;
    dcr:encoding ali:xml-encoding;
    dcr:representations ali:xul-representation-repository;
    dcr:searchPatterns ali:search-pattern-repository;
    dcr:perspectives ali:perspective-repository;
    dcr:formats ali:format-repository;
    dcr:perspectiveFactory ali:perspective-factory;
    dcr:decoration [a dcr:TemplateDecoration;
        dcr:before """<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xml:lang="<%= lang %>">
  <scrollbox flex='1' style='overflow: auto;' orient='vertical'>
""";
        dcr:after "\n</scrollbox></window>"].

ali:xul-modify-presentation a dcr:TextPresentation;
    rdfs:label "XUL presentation"@en;
    rdfs:comment "Presentation for XUL display."@en;
    dcr:accept "text/xul";
    dcr:accept "application/vnd.mozilla.xul+xml";
    dcr:contentType "application/vnd.mozilla.xul+xml";
    dcr:intention ali:modify;
    dcr:encoding ali:xml-encoding;
    dcr:representations ali:xul-modify-representation-repository;
    dcr:searchPatterns ali:search-pattern-repository;
    dcr:perspectives ali:perspective-repository;
    dcr:formats ali:format-repository;
    dcr:perspectiveFactory ali:perspective-factory;
    dcr:decoration [a dcr:TemplateDecoration;
        dcr:before """<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<window xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xml:lang="<%= lang %>">
  <script type="text/javascript">
  // <![CDATA[
  var savedChangesCount = 0;
  var unsavedChangesCount = 0;
  var changedBoxes = [];
  function modified(box) {
    if (box.tagName == 'groupbox')
      return modified(box.parentNode);
    box.changes = ++unsavedChangesCount;
    var changes = box.changes;
    changedBoxes[changes] = box;
    box.style.outlineStyle = 'ridge';
    box.style.outlineColor = 'yellow';
    setTimeout("saveChanges(" + changes + ")", 1000);
  }
  function saveChanges(changes) {
    if (changes < unsavedChangesCount)
      return false;
    var ns = "http://www.openrdf.org/rdf/2007/09/povml#";
    var lang = document.documentElement.getAttribute('xml:lang');
    var doc = document.implementation.createDocument(ns, "povml", null);
    doc.documentElement.setAttribute('xml:lang', lang);
    scrape(document.documentElement, doc, doc.documentElement);
    var povml = new XMLSerializer().serializeToString(doc);
    dump(povml);
    var req = new XMLHttpRequest();
    req.changes = changes;
    req.onreadystatechange = function (event) {
      if (req.readyState == 4) {
        dump(req.status);
        dump(req.responseText);
        if (req.status == 204) {
          savedChanges(changes);
        } else {
          couldNotBeSavedChanges(changes);
        }
      }
    };
    req.open('PUT', document.location.href, true);
    req.setRequestHeader("Content-Type", "application/alibaba.povml+xml");
    req.setRequestHeader("Content-Language", lang);
    req.send(povml);
  }
  function scrape(src, doc, dst) {
    var node;
    if (src.hasAttributes()) {
      if (src.getAttribute('hidden') == 'true') {
        return;
      } else if (src.hasAttribute('uri')) {
        node = doc.createElement('resource');
        var uri = src.getAttribute('uri');
        if (uri.indexOf('rdf:') == 0 && uri.length > 4) {
          node.setAttribute('uri', uri.substring(4));
        } else {
          node.setAttribute('uri', '');
        }
      } else if (src.hasAttribute('name')) {
        node = doc.createElement('display');
        node.setAttribute('name', src.getAttribute('name'));
      } else if (src.value) {
        node = doc.createElement('literal');
        node.textContent = src.value;
      }
    }
    if (node) {
      dst.appendChild(node);
    } else {
      node = dst;
    }
    if (src.hasChildNodes()) {
      var children = src.childNodes; 
      for (var i = 0; i < children.length; i++) {
        scrape (children[i], doc, node);
      }
    }
  }
  function savedChanges(changes) {
    if (changes < savedChangesCount)
      return false;
    var already = savedChangesCount;
    savedChangesCount = changes;
    for (var i=changes; i>already; i--) {
      var box = changedBoxes[i]; 
      if (box && box.changes == i) {
        saved(box);
      }
    }
  }
  function saved(box) {
    box.style.outlineStyle = 'none';
  }
  function couldNotBeSavedChanges(changes) {
    if (changes < savedChangesCount)
      return false;
    var already = savedChangesCount;
    for (var i=changes; i>already; i--) {
      var box = changedBoxes[i]; 
      if (box && box.changes == i) {
        couldNotBeSaved(box);
      }
    }
  }
  function couldNotBeSaved(box) {
    box.style.outlineColor = 'red';
  }
  function toggleResource(groupbox, button) {
    var hidden = findHidden(groupbox);
    if (button.label == '+') {
      modified(groupbox);
      hidden.setAttribute('hidden', 'false');
      button.label = '-';
    } else {
      modified(groupbox);
      hidden.setAttribute('hidden', 'true');
      button.label = '+';
    }
  }
  function addResource(groupbox) {
    var hidden = findHidden(groupbox);
    var clone = hidden.cloneNode(true);
    clone.removeAttribute('hidden');
    groupbox.appendChild(clone);
  }
  function removeResource(box) {
    modified(box.parentNode);
    box.parentNode.removeChild(box);
  }
  function addLiteral(groupbox) {
    var hidden = findHidden(groupbox);
    var clone = hidden.cloneNode(true);
    clone.removeAttribute('hidden');
    groupbox.appendChild(clone);
  }
  function removeLiteral(box) {
    modified(box.parentNode);
    box.parentNode.removeChild(box);
  }
  function findHidden(groupbox) {
    for (var i=0; i<groupbox.childNodes.length; i++) {
      var node = groupbox.childNodes[i];
      if (node.hasAttributes() && node.hasAttribute('hidden'))
        return node;
    }
  }
  // ]]>
  </script>
  <scrollbox flex='1' style='overflow: auto;' orient='vertical'>
""";
        dcr:after "\n</scrollbox></window>"].

# -----------------------------------------------
# Individual RepresentationRepositories
# -----------------------------------------------

ali:xul-representation-repository a dcr:RepresentationRepository;
    rdfs:label "xul representation repository"@en;
    rdfs:comment "Representation repository for XUL representations."@en;
    dcr:registeredRepresentation ali:xul-table-representation;
    dcr:registeredRepresentation ali:xul-inline-representation;
    dcr:registeredRepresentation ali:xul-link-representation;
    dcr:registeredRepresentation ali:xul-titled-list-representation.

ali:xul-modify-representation-repository a dcr:RepresentationRepository;
    rdfs:label "xul representation repository"@en;
    rdfs:comment "Representation repository for XUL representations."@en;
    dcr:registeredRepresentation ali:xul-modify-titled-list-representation;
    dcr:registeredRepresentation ali:xul-lookup-representation.

# -----------------------------------------------
# Individual Representation
# -----------------------------------------------

ali:xul-inline-representation a dcr:Representation;
    rdfs:label "xul inline representation"@en;
    rdfs:comment "Plain XUL span representation."@en;
    dcr:intention ali:present;
    dcr:intention ali:general;
    dcr:intention ali:detail;
    dcr:intention ali:related;
    dcr:conformsTo ali:inline;
    dcr:decoration [a dcr:TextDecoration;
    	dcr:before "\n<box class='representation'>";
    	dcr:separation "\n";
		dcr:after "\n</box>"];
    dcr:displayDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='element'>";
    	dcr:separation "\n";
		dcr:after "</box>"];
    dcr:perspectiveDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='display'><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "<box class='display empty'/>"];
    dcr:searchDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='display'><box class='child-representation'>";
    	dcr:separation "</box><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "<box class='display empty'/>"];
    dcr:literalDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='display'><label class='value'>";
    	dcr:separation "</label><label class='value'>";
		dcr:after "</label></box>";
		dcr:empty "<box class='display empty'/>"].

ali:xul-link-representation a dcr:Representation;
    rdfs:label "xul link representation"@en;
    rdfs:comment "XUL link reference."@en;
    dcr:intention ali:reference;
    dcr:conformsTo ali:inline;
    dcr:decoration ali:none;
    dcr:displayDecoration [a dcr:TextDecoration;
    	dcr:before "\n<box>";
    	dcr:separation "\n";
    	dcr:after "\n</box>"];
    dcr:perspectiveDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='display'><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "?"];
    dcr:searchDecoration [a dcr:TextDecoration;
    	dcr:before "<box class='display'><box class='child-representation'>";
    	dcr:separation "</box><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "?"];
    dcr:literalDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box class='display'><label class='text-link representation element'
    		onclick="document.location.href='<%= link.resolve(resource) %>'"> """;
    	dcr:separation """</label><label class='text-link value'
    		onclick="document.location.href='<%= link.resolve(resource) %>'">""";
		dcr:after "</label></box>";
		dcr:empty "?"].

ali:xul-table-representation a dcr:Representation;
    rdfs:label "xul table representation"@en;
    rdfs:comment "Plain XUL table representation."@en;
    dcr:intention ali:present;
    dcr:intention ali:general;
    dcr:intention ali:detail;
    dcr:intention ali:related;
    dcr:conformsTo ali:table;
    dcr:decoration [a dcr:TemplateDecoration;
    	dcr:before """\n<grid class='representation'>
    	<rows>
    	<row>
    	<% for (display in displays) { %>
    		<label>${display.rdfsLabel}</label>
    	<% } %>
    	</row>""";
    	dcr:separation "\n";
		dcr:after "\n</rows></grid>";
		dcr:empty "<grid class='representation empty'/>"];
    dcr:displayDecoration [a dcr:TextDecoration;
    	dcr:before "<row class='element'>";
    	dcr:separation "\n";
		dcr:after "</row>"];
    dcr:perspectiveDecoration [a dcr:TextDecoration;
    	dcr:before "<vbox class='display'><box class='child-representation'>";
		dcr:after "</box></vbox>";
		dcr:empty "<vbox class='display empty'/>"];
    dcr:searchDecoration [a dcr:TextDecoration;
    	dcr:before "<vbox class='display'><box class='child-representation'>";
    	dcr:separation "</box><box class='child-representation'>";
		dcr:after "</box></vbox>";
		dcr:empty "<vbox class='display empty'/>"];
    dcr:literalDecoration [a dcr:TextDecoration;
    	dcr:before "<vbox class='display'><label class='value'>";
    	dcr:separation "</label><label class='value'>";
		dcr:after "</label></vbox>";
		dcr:empty "<vbox class='display empty'/>"].

ali:xul-titled-list-representation a dcr:Representation;
    rdfs:label "xul titled list representation"@en;
    rdfs:comment "List values with display titles."@en;
    dcr:intention ali:present;
    dcr:intention ali:general;
    dcr:intention ali:detail;
    dcr:intention ali:related;
    dcr:conformsTo ali:titled-list;
    dcr:decoration [a dcr:TextDecoration;
    	dcr:before "\n<vbox class='representation'>";
    	dcr:separation "\n";
		dcr:after "\n</vbox>";
		dcr:empty "\n<vbox class='representation empty' />"];
    dcr:displayDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><% if (resource.rdfsLabel == null) { %><vbox><% } else { %><groupbox class='element'>
    	<caption><label style='text-transform:capitalize; white-space:nowrap'><%= resource.rdfsLabel %></label></caption><% } %>""";
    	dcr:separation "\n";
		dcr:after """<% if (resource.rdfsLabel == null) { %></vbox>
		<% } else { %></groupbox><% } %><box flex='1'/></box>"""];
    dcr:perspectiveDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><groupbox class='display child-representation'>
    	<caption><label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></caption>""";
    	dcr:after "</groupbox><box flex='1'/></box>"];
    dcr:searchDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><groupbox class='display child-representation'>
    	<caption><label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></caption>""";
    	dcr:after "</groupbox><box flex='1'/></box>"];
    dcr:literalDecoration [a dcr:TemplateDecoration;
    	dcr:before """<vbox class='display'>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label>
    	<description class='indent value'
			style='white-space: pre;
			min-width:<%= display.povSize?.povMinWidth?.povInCorpusSize %>ex;
			max-width:<%= display.povSize?.povMaxWidth?.povInCorpusSize %>ex'>""";
    	dcr:separation """</description><description class='indent value'
			style='white-space: pre;
			min-width:<%= display.povSize?.povMinWidth?.povInCorpusSize %>ex;
			max-width:<%= display.povSize?.povMaxWidth?.povInCorpusSize %>ex'>""";
		dcr:after "</description></vbox>"].

ali:xul-modify-titled-list-representation a dcr:Representation;
    rdfs:label "xul modify titled list representation"@en;
    rdfs:comment "List values for modification with display titles."@en;
    dcr:intention ali:modify;
    dcr:conformsTo ali:titled-list;
    dcr:decoration [a dcr:TextDecoration;
    	dcr:before "\n<vbox class='representation'>";
    	dcr:separation "\n";
		dcr:after "\n</vbox>";
		dcr:empty "\n<vbox class='representation empty' />"];
    dcr:displayDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><% if (resource?.rdfsLabel == null) { %>
    	<vbox uri='rdf:<%= resource?.qName?.namespaceURI %><%= resource?.qName?.localPart %>'><% } else { %>
    	<groupbox class='element' uri='rdf:<%= resource?.qName?.namespaceURI %><%= resource?.qName?.localPart %>'>
    	<caption><label style='text-transform:capitalize; white-space:nowrap'><%= resource?.rdfsLabel %></label></caption><% } %>""";
    	dcr:separation "\n";
		dcr:after """<% if (resource?.rdfsLabel == null) { %></vbox>
		<% } else { %></groupbox><% } %><box flex='1'/></box>"""];
    dcr:functionalPerspectiveDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><groupbox class='display child-representation' name='<%= display.povName %>'>
    	<caption><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></vbox>
    	<button label='-' style='min-width:2em;' oncommand='toggleResource(this.parentNode.parentNode, this)'/>
    	</caption><box hidden='false'>""";
    	dcr:after "</box></groupbox><box flex='1'/></box>";
    	dcr:empty """<box><groupbox class='display child-representation' name='<%= display.povName %>'>
    	<caption><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></vbox>
    	<button label='+' style='min-width:2em;' oncommand='toggleResource(this.parentNode.parentNode, this)'/>
    	</caption><box hidden='true'>
    	<% presentation.exportRepresentation(display.povPerspective, context); %>
    	</box></groupbox><box flex='1'/></box>"""];
    dcr:perspectiveDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><groupbox class='display child-representation' name='<%= display.povName %>'>
    	<caption><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></vbox>
    	<button label='+' style='min-width:2em;' oncommand='addResource(this.parentNode.parentNode)'/>
    	</caption><box hidden='true'>
    	<% presentation.exportRepresentation(display.povPerspective, context); %>
    	<vbox><button label='-' style='min-width:2em' oncommand='removeResource(this.parentNode.parentNode)'/><box flex='1'/></vbox>
    	</box><box>""";
    	dcr:separation """<vbox>
    	<button label='-' style='min-width:2em' oncommand='removeResource(this.parentNode.parentNode)'/>
    	<box flex='1'/></vbox></box><box>""";
    	dcr:after """<vbox>
    	<button label='-' style='min-width:2em' oncommand='removeResource(this.parentNode.parentNode)'/>
    	<box flex='1'/></vbox></box></groupbox><box flex='1'/></box>""";
    	dcr:empty """<box><groupbox class='display child-representation' name='<%= display.povName %>'>
    	<caption><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label>></vbox>
    	<button label='+' style='min-width:2em;' oncommand='addResource(this.parentNode.parentNode)'/>
    	</caption><box hidden='true'>
    	<% presentation.exportRepresentation(display.povPerspective, context); %>
    	<vbox><button label='-' style='min-width:2em' oncommand='removeResource(this.parentNode.parentNode)'/>
    	<box flex='1'/></vbox>
    	</box></groupbox><box flex='1'/></box>"""];
    dcr:functionalLiteralDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><vbox class='display' name='<%= display.povName %>'>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label>
		<textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>' value='""";
		dcr:after "'/></vbox><box flex='1'/></box>";
    	dcr:empty """<box><vbox class='display' name='<%= display.povName %>'>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label>
		<textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>'/>
    	</vbox><box flex='1'/></box>"""];
    dcr:literalDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box><vbox class='display' name='<%= display.povName %>'>
    	<box><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></vbox>
    	<button label="+" style="min-width:2em" oncommand='addLiteral(this.parentNode.parentNode)'/></box>
		<box hidden='true'><textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>'/>
		<vbox><button label='-' style='min-width:2em' oncommand='removeLiteral(this.parentNode.parentNode)'/>
		<box flex='1'/></vbox></box>
		<box><textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>' value='""";
    	dcr:separation """'/><vbox>
    	<button label='-' style='min-width:2em' oncommand='removeLiteral(this.parentNode.parentNode)'/>
    	<box flex='1'/></vbox></box><box>
    	<textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>' value='""";
		dcr:after """'/><vbox>
		<button label='-' style='min-width:2em' oncommand='removeLiteral(this.parentNode.parentNode)'/>
		<box flex='1'/></vbox></box></vbox><box flex='1'/></box>""";
    	dcr:empty """<box><vbox class='display' name='<%= display.povName %>'>
    	<box><vbox><box flex='1'/>
    	<label class='header' style='text-transform:capitalize; white-space:nowrap'>${display.rdfsLabel}</label></vbox>
    	<button label="+" style="min-width:2em" oncommand='addLiteral(this.parentNode.parentNode)'/></box>
		<box hidden='true'><textbox class='indent value' onchange='modified(this)'
			multiline='<%= display.povSize != null
				&& (display.povSize.povMaxHeight?.povInFontSize == null
					|| display.povSize.povMaxHeight.povInFontSize > 1) ? 'true' : 'false' %>'
			cols='<%= display.povSize?.povWidth?.povInCorpusSize %>'
			rows='<%= display.povSize?.povHeight?.povInFontSize %>'/>
		<vbox><button label='-' style='min-width:2em' oncommand='removeLiteral(this.parentNode.parentNode)'/>
		<box flex='1'/></vbox></box></vbox><box flex='1'/></box>"""].

ali:xul-lookup-representation a dcr:Representation;
    rdfs:label "xul lookup representation"@en;
    rdfs:comment "XUL lookup reference."@en;
    dcr:intention ali:lookup;
    dcr:intention ali:reference;
    dcr:conformsTo ali:inline;
    dcr:decoration ali:none;
    dcr:displayDecoration [a dcr:TemplateDecoration;
    	dcr:before "\n<box uri='rdf:<%= resource?.qName?.namespaceURI %><%= resource?.qName?.localPart %>'>";
    	dcr:separation "\n";
    	dcr:after "\n</box>"];
    dcr:perspectiveDecoration [a dcr:TemplateDecoration;
    	dcr:before "<box class='display' name='<%= display.povName %>'><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "<label>?</label>"];
    dcr:searchDecoration [a dcr:TemplateDecoration;
    	dcr:before "<box class='display' name='<%= display.povName %>'><box class='child-representation'>";
    	dcr:separation "</box><box class='child-representation'>";
		dcr:after "</box></box>";
		dcr:empty "<label>?</label>"];
    dcr:literalDecoration [a dcr:TemplateDecoration;
    	dcr:before """<box class='display' name='<%= display.povName %>'>
    	<textbox class='representation element' onchange='modified(this)' value='""";
    	dcr:separation """'/><textbox class='text-link value' onchange='modified(this)' value='""";
		dcr:after "'/></box>";
		dcr:empty """<box class='display' name='<%= display.povName %>'>
    	<textbox class='representation element' onchange='modified(this)'/></box>"""].
