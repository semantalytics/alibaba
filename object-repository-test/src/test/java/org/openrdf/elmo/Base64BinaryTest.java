package org.openrdf.elmo.codegen;

import java.io.File;
import java.net.URL;
import java.net.URLClassLoader;

import junit.framework.TestCase;

import org.apache.commons.codec.binary.Base64;
import org.openrdf.elmo.LiteralManager;
import org.openrdf.elmo.sesame.SesameLiteralManager;
import org.openrdf.elmo.sesame.SesameManagerFactory;
import org.openrdf.elmo.sesame.converters.Marshall;
import org.openrdf.model.Literal;
import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.repository.Repository;

public class Base64BinaryTest extends TestCase {

	/** namespace. */
	private static final String NS = "urn:test:base64binary#";

	/** Directory used to store files generated by this test case. */
	private static File targetDir;

	public void testOneOf() throws Exception {
		File jar = createFile("binary.jar");
		OntologyConverter converter = createConventer();
		converter.addRdfSource(find("/ontologies/binary-ontology.owl"));
		converter.bindPackageToNamespace("concepts.binary", NS);
		converter.init();
		converter.createClasses(jar);
		converter = createConventer();
		converter.addJar(jar.toURI().toURL());
		converter.bindPackageToNamespace("concepts.binary", NS);
		converter.init();
		File owl = createFile("binary-ontology.owl");
		converter.createOntology(owl);
	}

	/**
	 * Setup the test case.
	 * 
	 * @throws Exception
	 */
	@Override
	protected void setUp() throws Exception {
		if (targetDir == null) {
			targetDir = File.createTempFile("elmo-codegen", "");
			targetDir.delete();
			targetDir = new File(targetDir.getParentFile(), "elmo-codegen");
			targetDir.mkdir();
		}
	}

	private OntologyConverter createConventer() {
		OntologyConverter converter = new Converter();
		converter.setImportJarOntologies(false);
		converter.addRdfSource(find("/ontologies/xsd-datatypes.rdf"));
		converter.addRdfSource(find("/ontologies/rdfs-schema.rdf"));
		converter.addRdfSource(find("/ontologies/owl-schema.rdf"));
		return converter;
	}

	/**
	 * Creates a new File object in the <code>targetDir</code> folder.
	 * 
	 * @param name
	 * @return
	 */
	private File createFile(String filename) {
		File file = new File(targetDir, filename);
		if (file.exists()) {
			file.delete();
		}
		return file;
	}

	/**
	 * Returns a resource from the classpath.
	 * 
	 * @param owl
	 * @return
	 */
	private URL find(String owl) {
		return getClass().getResource(owl);
	}

	private class Converter extends OntologyConverter {
		@Override
		protected SesameManagerFactory createSesameManager(
				Repository repository, URLClassLoader cl) {
			SesameManagerFactory manager = super.createSesameManager(repository, cl);
			LiteralManager<URI, Literal> literals = manager.getLiteralManager();
			SesameLiteralManager literalManager = (SesameLiteralManager) literals;
			// record additional Marshal for Base64 encoded byte arrays
			ValueFactory vf = repository.getValueFactory();
			ByteArrayMarshall marshall = new ByteArrayMarshall(vf);
			literalManager.recordMarshall(byte[].class, marshall);
			String type = marshall.getDatatype().toString();
			literalManager.recordType(byte[].class, type);
			return manager;
		}
	};

	public class ByteArrayMarshall implements Marshall<byte[]> {
		private ValueFactory vf;

		public ByteArrayMarshall(ValueFactory vf) {
			this.vf = vf;
		}

		public byte[] deserialize(Literal literal) {
			return Base64.decodeBase64(literal.stringValue().getBytes());
		}

		public URI getDatatype() {
			return XMLSchema.BASE64BINARY;
		}

		public String getJavaClassName() {
			return byte[].class.getName();
		}

		public Literal serialize(byte[] data) {
			return vf.createLiteral(new String(Base64.encodeBase64(data)));
		}

		public void setDatatype(URI datatype) {
			if (!datatype.equals(XMLSchema.BASE64BINARY)) {
				throw new IllegalArgumentException(datatype.toString());
			}
		}
	}

}
