package org.openrdf.elmo.codegen;

import java.io.File;
import java.net.URL;

import junit.framework.TestCase;

public class OneOfTest extends TestCase {
	
	/** oneOf namespace. */
	private static final String ONE = "http://example.org/oneOf#";

	/** Directory used to store files generated by this test case. */
	private static File targetDir;

	public void testOneOf() throws Exception {
		File jar = createFile("oneof.jar");
		OntologyConverter converter = createConventer();
		converter.addRdfSource(find("/ontologies/oneof-ontology.owl"));
		converter.bindPackageToNamespace("concepts.one", ONE);
		converter.init();
		converter.createClasses(jar);
		converter = createConventer();
		converter.addJar(jar.toURI().toURL());
		converter.bindPackageToNamespace("concepts.one", ONE);
		converter.init();
		File owl = createFile("oneof-ontology.owl");
		converter.createOntology(owl);
	}

	/**
	 * Setup the test case.
	 * 
	 * @throws Exception
	 */
	@Override
	protected void setUp() throws Exception {
		if (targetDir == null) {
			targetDir = File.createTempFile("elmo-codegen", "");
			targetDir.delete();
			targetDir = new File(targetDir.getParentFile(), "elmo-codegen");
			targetDir.mkdir();
		}
	}

	private OntologyConverter createConventer() {
		OntologyConverter converter = new OntologyConverter();
		converter.setImportJarOntologies(false);
		converter.addRdfSource(find("/ontologies/xsd-datatypes.rdf"));
		converter.addRdfSource(find("/ontologies/rdfs-schema.rdf"));
		converter.addRdfSource(find("/ontologies/owl-schema.rdf"));
		return converter;
	}

	/**
	 * Creates a new File object in the <code>targetDir</code> folder.
	 * 
	 * @param name
	 * @return
	 */
	private File createFile(String filename) {
		File file = new File(targetDir, filename);
		if (file.exists()) {
			file.delete();
		}
		return file;
	}

	/**
	 * Returns a resource from the classpath.
	 * 
	 * @param owl
	 * @return
	 */
	private URL find(String owl) {
		return getClass().getResource(owl);
	}
}
