package org.openrdf.elmo.codegen;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

import junit.framework.TestCase;

import org.openrdf.concepts.rdfs.Resource;
import org.openrdf.elmo.sesame.SesameManager;

/**
 * OntologyConverter test case.
 * 
 * All of the source RDF/OWL files tested here are packaged within the
 * <code>META-INF/ontologies</code> folder of the
 * <code>openrdf-elmo-1.0-concepts.jar</code> file.
 * 
 * The default behaviour of <code>OntologyConverter</code> is to import these
 * ontologies. This behaviour can be over-ridden by using the
 * {@link OntologyConverter#setImportJarOntologies(boolean)} method. When set to
 * false, the ontologies are no longer automatically imported and therefore must
 * be explicitly imported using the {@link OntologyConverter#addRdfSource(URL)}
 * method (as demonstrated in {@link #testDc()} and
 * {@link #createFoafJar(String)}).
 * 
 */
public class OntologyConverterTest extends TestCase {

	/** AtomOwl Vocabulary namespace. */
	private static final String AWOL = 
			"http://bblfish.net/work/atom-owl/2006-06-06/#";

	/** Dublin Core (DC) Elements namespace. */
	private static final String DC = 
			"http://purl.org/dc/elements/1.1/";

	/** Friend of a Friend (FOAF) namespace. */
	private static final String FOAF = "http://xmlns.com/foaf/0.1/";

	/** Genealogical Data Communication (GEDCOM) namespace. */
	private static final String GEDCOM = 
			"http://www.daml.org/2001/01/gedcom/gedcom#";

	/** Directory used to store files generated by this test case. */
	private static File targetDir;

	/**
	 * AtomOwl (AWOL) jar creation test.
	 * 
	 * @throws Exception
	 */
	public void testAtomowl() throws Exception {
		OntologyConverter converter = new OntologyConverter();
		converter.addRdfSource(find("/ontologies/awol-ontology.owl"));
		File jar = createFile("awol.jar");
		converter.bindPackageToNamespace("concepts.awol", AWOL);
		converter.setNamespace("awol",
				"http://bblfish.net/work/atom-owl/2006-06-06/#");
		converter.init();
		converter.createClasses(jar);
		assertTrue(jar.isFile());
		assertEquals(19, countClasses(jar, ".java"));
		assertEquals(19, countClasses(jar, ".class"));
	}

	/**
	 * Test the command-line interface.
	 * 
	 * @throws Exception
	 */
	public void testCliPrefix() throws Exception {
		OntologyConverter.main(new String[] { "-h" });
		File jar = createFile("cli.jar");
		OntologyConverter.main(new String[] { "-p", "px", "-e",
				"java.io.Serializable", "-b", "concepts.gedcom=" + GEDCOM,
				"-b", "concepts.foaf=" + FOAF, "-j", jar.getAbsolutePath(),
				find("/ontologies/gedcom-ontology.owl").toExternalForm(),
				find("/ontologies/foaf-ontology.owl").toExternalForm() });
	}

	/**
	 * Test the command-line interface.
	 * 
	 * @throws Exception
	 */
	public void testCliNoPrefix() throws Exception {
		OntologyConverter.main(new String[] { "-h" });
		File jar = createFile("cli.jar");
		OntologyConverter.main(new String[] { "-p", "-e",
				"java.io.Serializable", "-b", "concepts.gedcom=" + GEDCOM,
				"-b", "concepts.foaf=" + FOAF, "-j", jar.getAbsolutePath(),
				find("/ontologies/gedcom-ontology.owl").toExternalForm(),
				find("/ontologies/foaf-ontology.owl").toExternalForm() });
	}

	/**
	 * Dublin Core (DC) Elements jar creation test.
	 * 
	 * Automatic RDF source file import is disabled, and ontologies are manually
	 * added to converter.
	 * 
	 * @throws Exception
	 */
	public void testDc() throws Exception {
		OntologyConverter converter = new OntologyConverter();
		converter.setImportJarOntologies(false);
		converter.addRdfSource(find("/ontologies/xsd-datatypes.rdf"));
		converter.addRdfSource(find("/ontologies/rdfs-schema.rdf"));
		converter.addRdfSource(find("/ontologies/owl-schema.rdf"));
		converter.addRdfSource(find("/ontologies/dc-elements-schema.rdf"));
		converter.addRdfSource(find("/ontologies/dc-terms-schema.rdf"));
		converter.addRdfSource(find("/ontologies/dc-type-schema.rdf"));
		converter.bindPackageToNamespace("concepts.dc", DC);
		converter.bindPackageToNamespace("concepts.dc.terms",
				"http://purl.org/dc/terms/");
		converter.bindPackageToNamespace("concepts.dc.type",
				"http://purl.org/dc/dcmitype/");
		converter.init();
		File jar = createFile("dc.jar");
		converter.createClasses(jar);
		assertTrue(jar.isFile());
		assertEquals(42, countClasses(jar, ".java"));
		assertEquals(42, countClasses(jar, ".class"));
	}

	/**
	 * Friend of a Friend (FOAF) ontology jar test.
	 * 
	 * Delegates to {@link #createFoafJar(String)} for the creation of the jar
	 * file.
	 * 
	 * @throws Exception
	 */
	public void testFoaf() throws Exception {
		File jar = createFoafJar("concepts.foaf");
		assertTrue(jar.isFile());
	}

	/**
	 * Friend of a Friend (FOAF) ontology creation test.
	 * 
	 * Delegates to {@link #createFoafJar(String)} for the creation of the jar
	 * file. The generated jar file is then added to the converter for the
	 * creation of the ontology file.
	 * 
	 * @throws Exception
	 */
	public void testFoafOntology() throws Exception {
		File jar = createFoafJar("concepts.foaf");
		assertTrue(jar.isFile());
		OntologyConverter converter = new OntologyConverter();
		converter.addJar(jar.toURI().toURL());
		converter.bindPackageToNamespace("concepts.foaf", FOAF);
		converter.init();
		File owl = createFile("foaf.owl");
		assertFalse(owl.isFile());
		converter.createOntology(owl);
		assertTrue(owl.isFile());
	}

	/**
	 * Genealogical Data Communication (GEDCOM) jar creation test.
	 * 
	 * Automatic RDF source file import is left enabled, but gedcom-ontology.owl
	 * is manually added to converter.
	 * 
	 * @throws Exception
	 */
	public void testGedcom() throws Exception {
		OntologyConverter converter = new OntologyConverter();
		converter.addRdfSource(find("/ontologies/gedcom-ontology.owl"));
		converter.bindPackageToNamespace("concepts.gedcom", GEDCOM);
		converter.init();
		File jar = createFile("gedcom.jar");
		converter.createClasses(jar);
		assertTrue(jar.isFile());
		assertEquals(10, countClasses(jar, ".java"));
		assertEquals(10, countClasses(jar, ".class"));
	}

	/**
	 * Setup the test case.
	 * 
	 * @throws Exception
	 */
	@Override
	protected void setUp() throws Exception {
		if (targetDir == null) {
			targetDir = File.createTempFile("elmo-codegen", "");
			targetDir.delete();
			targetDir = new File(targetDir.getParentFile(), "elmo-codegen");
			targetDir.mkdir();
		}
		// enableLogging(OntologyConverter.class);
		// enableLogging(OwlNormalizer.class);
		enableLogging(CodeGenerator.class);
		enableLogging(OwlGenerator.class);
		enableLogging(JavaCompiler.class);
		enableLogging(SesameManager.class);
		super.setUp();
	}

	/**
	 * Count the number of files with the given <code>suffix</code> that exist
	 * inside the specified jar file.
	 * 
	 * @param jar
	 * @param suffix
	 * @return
	 * @throws IOException
	 */
	private int countClasses(File jar, String suffix) throws IOException {
		int count = 0;
		JarFile file = new JarFile(jar);
		Enumeration<JarEntry> entries = file.entries();
		while (entries.hasMoreElements()) {
			String name = entries.nextElement().getName();
			if (name.endsWith(suffix) && !name.contains("-")) {
				count++;
			}
		}
		return count;
	}

	/**
	 * Creates a new File object in the <code>targetDir</code> folder.
	 * 
	 * @param name
	 * @return
	 */
	private File createFile(String filename) {
		File file = new File(targetDir, filename);
		if (file.exists()) {
			file.delete();
		}
		return file;
	}

	private File createFoafJar(String pkgName) throws Exception,
			MalformedURLException, IOException {
		File jar = createFile("foaf.jar");
		OntologyConverter converter = new OntologyConverter();
		converter.setImportJarOntologies(false);
		converter.setBaseClasses(new String[]{Resource.class.getName()});
		converter.addRdfSource(find("/ontologies/xsd-datatypes.rdf"));
		converter.addRdfSource(find("/ontologies/rdfs-schema.rdf"));
		converter.addRdfSource(find("/ontologies/owl-schema.rdf"));
		converter.addRdfSource(find("/ontologies/foaf-ontology.owl"));
		converter.bindPackageToNamespace(pkgName, FOAF);
		converter.init();
		converter.createClasses(jar);
		assertTrue(jar.isFile());
		assertEquals(13, countClasses(jar, ".java"));
		assertEquals(13, countClasses(jar, ".class"));
		return jar;
	}

	/**
	 * Sets the logging level for the specified class.
	 * 
	 * @param clazz
	 */
	private void enableLogging(Class<?> clazz) {
		Logger logger = Logger.getLogger(clazz.getName());
		ConsoleHandler handler = new ConsoleHandler();
		logger.addHandler(handler);
		handler.setLevel(Level.FINE);
		logger.setLevel(Level.FINE);
	}

	/**
	 * Returns a resource from the classpath.
	 * 
	 * @param owl
	 * @return
	 */
	private URL find(String owl) {
		return getClass().getResource(owl);
	}
}
