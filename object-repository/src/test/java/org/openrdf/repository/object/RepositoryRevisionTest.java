package org.openrdf.repository.object;

import info.aduna.io.FileUtil;

import java.io.File;

import junit.framework.TestCase;

import org.openrdf.model.URI;
import org.openrdf.model.ValueFactory;
import org.openrdf.model.vocabulary.OWL;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.repository.object.config.ObjectRepositoryConfig;
import org.openrdf.repository.object.config.ObjectRepositoryFactory;
import org.openrdf.repository.sail.SailRepository;
import org.openrdf.sail.memory.MemoryStore;

public class RepositoryRevisionTest extends TestCase {

	/** Directory used to store files generated by this test case. */
	protected File targetDir;

	/**
	 * Setup the test case.
	 * 
	 * @throws Exception
	 */
	@Override
	protected void setUp() throws Exception {
		targetDir = File.createTempFile("owl-codegen", "");
		targetDir.delete();
		targetDir = new File(targetDir, getClass().getSimpleName());
		targetDir.mkdirs();
	}

	@Override
	public void tearDown() throws Exception {
		FileUtil.deltree(targetDir.getParentFile());
	}

	public void testRestoreRevision() throws Exception {
		ObjectRepositoryFactory ofm = new ObjectRepositoryFactory();
		ObjectRepositoryConfig config = ofm.getConfig();
		config.setCompileRepository(true);
		ObjectRepository repo = ofm.getRepository(config);
		repo.setDelegate(new SailRepository(new MemoryStore()));
		repo.setDataDir(targetDir);
		repo.initialize();
		ObjectConnection con = repo.getConnection();
		ValueFactory vf = con.getValueFactory();
		con.setNamespace("", "urn:dynamic:");
		URI property = vf.createURI("urn:dynamic:property");
		con.add(property, RDF.TYPE, OWL.FUNCTIONALPROPERTY);
		con.add(property, RDFS.RANGE, XMLSchema.STRING);
		con.close();
		con = con.getRepository().getConnection();
		Object obj = con.getObject("urn:test:resource");
		obj.getClass().getMethod("getProperty");
		con.close();
		int revision = repo.getSchemaRevision();
		repo.shutDown();
		repo = ofm.getRepository(config);
		repo.setDelegate(new SailRepository(new MemoryStore()));
		repo.setDataDir(targetDir);
		repo.initialize();
		assertTrue(revision < repo.getSchemaRevision());
	}
}
