@prefix obj  :<http://www.openrdf.org/rdf/2009/object#>.
@prefix owl  :<http://www.w3.org/2002/07/owl#>.
@prefix rdfs :<http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdf  :<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix xsd  :<http://www.w3.org/2001/XMLSchema#>.
@prefix :<#>.

:test a :ScriptTest.

:test-case rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	obj:script "assertTrue(true);".

:test-self rdfs:subClassOf :test-case;
	obj:imports :test;
	obj:script "assertEquals(this, test)".

:test-method-call rdfs:subClassOf :test-case;
	obj:script "assertEquals('Hello World', hello())".

:hello rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom xsd:string];
	obj:script "return 'Hello World'".

:test-proceed rdfs:subClassOf :test-case;
	obj:script "assertEquals('Hello World', overrided())".

:overrided rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom xsd:string];
	obj:script "return 'World'".

:overrider owl:equivalentClass :overrided;
	obj:precedes :overrided;
	obj:script "return 'Hello ' + proceed()".

:test-literal-parameter rdfs:subClassOf :test-case;
	obj:script "assertEquals('Hello World', helloTo('World'))".

:hello-to rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom xsd:string];
	obj:script "return 'Hello ' + helloToYou".

:hello-to-you a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :hello-to;
	rdfs:range xsd:string.

:test-object-parameter rdfs:subClassOf :test-case;
	obj:imports :test;
	obj:script "assertEquals('Hello ' + test, helloToObject(this))".

:hello-to-object rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom xsd:string];
	obj:script "return 'Hello ' + helloToThis.resource.stringValue()".

:hello-to-this a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :hello-to-object;
	rdfs:range :ScriptTest.

:test-imports-class rdfs:subClassOf :test-case;
	obj:imports <java:java.lang.Integer>;
	obj:script "assertEquals(new Integer('5').intValue(), 5)".

:test-return-set rdfs:subClassOf :test-case;
	obj:script "assertTrue(createSet() instanceof java.util.Set)".

:create-set rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	obj:sparql "SELECT ?self WHERE { ?self a :ScriptTest }".

:test-recursion rdfs:subClassOf :test-case;
	obj:script "assertEquals(120, factorial(5).intValue())".

:factorial rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:int];
	obj:script "if (n < 1) return 1; return n * factorial(n - 1)".

:n a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :factorial;
	rdfs:range xsd:int.

:test-fibonacci rdfs:subClassOf :test-case;
	obj:script "assertEquals(55, fibonacci(10))".

:fibonacci rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom :ScriptTest];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:int];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality 1];
	rdfs:subClassOf [owl:onProperty :fib;
		owl:cardinality 1];
	obj:script "if (fib <= 0) return 0; if (fib <= 1) return 1; return fibonacci(fib - 1) + fibonacci(fib - 2)".

:fib a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :fibonacci;
	rdfs:range xsd:int.

