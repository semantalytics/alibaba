@prefix obj  :<http://www.openrdf.org/rdf/2009/object#>.
@prefix dc   :<http://purl.org/dc/elements/1.1/>.
@prefix owl  :<http://www.w3.org/2002/07/owl#>.
@prefix rdfs :<http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdf  :<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix xsd  :<http://www.w3.org/2001/XMLSchema#>.

@prefix :<urn:test:xsl#>.

:Entity a rdfs:Class.

:fragment1 a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain :Entity;
	rdfs:range rdf:XMLLiteral.

:fragment2 a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain :Entity;
	rdfs:range rdf:XMLLiteral.

:helloWorld a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse; owl:allValuesFrom xsd:string];
	obj:xslt """
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" />
<xsl:template match="/">
<xsl:text>hello world!</xsl:text>
</xsl:template>
</xsl:stylesheet>
"""^^rdf:XMLLiteral.

:hello a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse; owl:allValuesFrom xsd:string];
	obj:xslt """
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" />
<xsl:param name="entity" />
<xsl:template match="/">
<xsl:text>hello </xsl:text>
<xsl:value-of select="$entity"/>
<xsl:text>!</xsl:text>
</xsl:template>
</xsl:stylesheet>
"""^^rdf:XMLLiteral.

:hello-entity a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :hello;
	rdfs:range :Entity;
	obj:name "entity".

:add a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse; owl:allValuesFrom xsd:string];
	obj:xslt """
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" />
<xsl:param name="number" />
<xsl:param name="increment" />
<xsl:template match="/">
<xsl:value-of select="$number + $increment"/>
</xsl:template>
</xsl:stylesheet>
"""^^rdf:XMLLiteral.

:hello-number a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :add;
	rdfs:range xsd:int;
	obj:name "number".

:hello-increment a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :add;
	rdfs:range xsd:int;
	obj:name "increment".

:execute a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse; owl:allValuesFrom xsd:string];
	obj:xslt """
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" />
<xsl:template match="echo">
<xsl:value-of select="@msg"/>
</xsl:template>
<xsl:template match="text()"/>
</xsl:stylesheet>
"""^^rdf:XMLLiteral.

:execute-input a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain :execute;
	rdfs:range rdf:XMLLiteral.

:executeInXML a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse; owl:allValuesFrom rdf:XMLLiteral];
	obj:xslt """
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:template match="echo">
<xsl:copy-of select="*"/>
</xsl:template>
<xsl:template match="text()"/>
</xsl:stylesheet>
"""^^rdf:XMLLiteral.

:executeInXML-input a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain :executeInXML;
	rdfs:range rdf:XMLLiteral.

<urn:test:entity> a :Entity;
	:fragment1 """
<echo msg="hello world!"/>
"""^^rdf:XMLLiteral;
	:fragment2 """
<echo>
<echo msg="hello world!"/>
</echo>
"""^^rdf:XMLLiteral.

:test a owl:Class;
	rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:allValuesFrom :Entity];
	rdfs:subClassOf [owl:onProperty obj:objectResponse; owl:allValuesFrom owl:Nothing].

:testImpl a owl:ObjectProperty;
	rdfs:subPropertyOf obj:Method;
	rdfs:domain :Entity;
	rdfs:range :test;
	obj:imports <java:junit.framework.Assert>;
	obj:java """
Assert.assertEquals("hello world!", helloWorld());
Entity entity = (Entity) getObjectConnection().getObject("urn:test:entity");
Assert.assertEquals("hello urn:test:entity!", hello(entity));
Assert.assertEquals("4", add(1, 3));
Assert.assertEquals("", execute(null));
Assert.assertNotNull(entity.getFragment1());
Assert.assertEquals("hello world!", execute(entity.getFragment1()));
Assert.assertEquals("hello world!", execute(executeInXML(entity.getFragment2())));
""".
